{
	"paused": false,
	"id": "fyr7w002hk40d",
	"reference": "",
	"author": "",
	"group": "",
	"icon": "fas fa-microchip",
	"color": "",
	"version": "",
	"readme": "",
	"url": "https://",
	"name": "Flowproxy_form1",
	"components": {
		"cpv4n3510c": "<script total>\n\n\texports.name = 'Route';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-road';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [config.timeout];\n\n\t\t\t\tconfig.upload && flags.push('upload');\n\t\t\t\tprev = ROUTE(config.method + ' ' + config.url, function() {\n\n\t\t\t\t\tvar ctrl = this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = ctrl.body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = ctrl.query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = ctrl.params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: ctrl.body, query: ctrl.query, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: ctrl.params, ip: ctrl.ip };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\t\t\t\t\tmsg.send('output', data);\n\t\t\t\t}, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n< __IMPORTANT__:<br>The component works only with a defined Proxy endpoint in the Flow settings.\n< __URL__:<br>The URL must be relative to the defined Proxy endpoint. So if the endpoint is `/users/` and the desired address is `http://example.com/users/find` then the value must be `/find`\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\" data-bind=\"flow.head.worker__hide:!value || flow.head.origin.length < flow.head.proxyurl.length\">\n\t\t\t<div class=\"col-md-12 m\">\n\t\t\t\t<div class=\"message message-error\"><b><i class=\"fa fa-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"flow.head.proxyurl__text:value?value:window.location.origin\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer data-bind=\"CONFIG.method__show\" class=\"hidden\">\n\t\t<div><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:flow.head.proxyurl + (value[0] === '/' ? value.substring(1) : value)\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
		"typerefinery_printjson": "<script total>\r\n\r\n\texports.id = 'typerefinery_printjson';\r\n\texports.name = 'Print JSON';\r\n\texports.icon = 'fa fa-print';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'TypeRefinery.io';\r\n\texports.version = '2';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, repo: false, data: true };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\t\tinstance.message = function($) {\r\n\r\n\t\t\tvar data = $.data;\r\n\r\n\t\t\tif (config.data !== false) {\r\n\t\t\t\tif (data instanceof Buffer)\r\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\r\n\t\t\t}\r\n\r\n\t\t\tvar count = 0;\r\n\r\n\t\t\tfor (var key in config) {\r\n\t\t\t\tif (key == \"repo\" || key == \"data\" ) {\r\n\t\t\t\t\tif (config[key]) {\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tvar output = count > 1 ? {} : null;\r\n\r\n\t\t\tif (config.repo) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.repo = $.repo;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.repository;\r\n\t\t\t}\r\n\r\n\t\t\tif (config.data) {\r\n\t\t\t\tif (output)\r\n\t\t\t\t\toutput.data = $.data;\r\n\t\t\t\telse\r\n\t\t\t\t\toutput = $.data;\r\n\t\t\t}\r\n\r\n\t\t\toutput && instance.status(output);\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.status('');\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\r\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n</style>\r\n\r\n<readme>\r\n\tThe component prints incoming data in a JSON format.\r\n</readme>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.repo__type:checkbox\">Shows repository</div>\r\n\t\t<div data---=\"input__?.data__type:checkbox\">Shows data</div>\r\n\t</div>\r\n</settings>\r\n\r\n<script>\r\n\tFUNC.printjson_click = function(type, data) { // type = path/data\r\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\r\n\t};\r\n\r\n\t$('body').on('click', '.ui-objecttree .fa-copy, .ui-objecttree .fa-link', function(){\r\n\t\tvar el = $(this);\r\n\t\tvar iscopy = el.hclass('fa-copy');\r\n\t\tel.tclass(iscopy ? 'fa-copy' : 'fa-link').tclass('fa-check');\r\n\t\tsetTimeout(function(){\r\n\t\t\tel.tclass('fa-check').tclass(iscopy ? 'fa-copy' : 'fa-link');\r\n\t\t}, 2000);\r\n\t});\r\n</script>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\r\n\t</header>\r\n\t<footer>\r\n\t\t<div data---=\"objecttree__!STATUS__exec:FUNC.printjson_click\" class=\"selectable\"></div>\r\n\t</footer>\r\n</body>",
		"c71gcc7fd3": "<script total>\n\n\texports.name = 'HTTP Route';\n\texports.group = 'Triggers';\n\texports.icon = 'fa fa-route';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { url: '', method: '', timeout: 5000, limit: 5120, upload: false, response: 'empty' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = '';\n\t\tvar action = function(opt, next) {\n\n\t\t\tvar msg = instance.newmessage(opt);\n\n\t\t\tif (config.response === 'empty') {\n\t\t\t\tnext({ type: 'empty' });\n\t\t\t} else {\n\t\t\t\tif (config.response === 'custom')\n\t\t\t\t\tmsg.refs.response = next;\n\t\t\t\telse\n\t\t\t\t\tmsg.on('end', msg => next({ type: config.response, body: msg.data instanceof Buffer ? msg.data.toString('base64') : msg.data, status: msg.repo.status, headers: msg.repo.headers }));\n\t\t\t}\n\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tinstance.httproute(prev, null);\n\t\t\t\tprev = '';\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\t\t\t\tprev = config.method + ' ' + config.url + ' #' + config.timeout + ' #' + config.limit + (config.upload ? ' #upload' : '');\n\t\t\t\tinstance.httproute(prev, action);\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next.\n\n__Output data__:\n\n```js\n{\n\t\"route\": String,\n\t\"params\": Object,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"files\": Array,\n\t\"headers\": Object,\n\t\"url\": String,\n\t\"ip\": String,\n\t\"cookies\": Object\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\">Relative URL address</div>\n\t\t\t\t<div class=\"help\">Relative path to: <span data-bind=\"window.location.origin__text\"></span></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__required:1;type:number\">Timeout</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__required:1;type:number;ricon:!kB;align:1\">Request limit</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.response__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML,custom|Custom\">Response</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer span { font-family: var(--monospace); }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div data-bind=\"CONFIG.method__show\" class=\"hidden\"><span data-bind=\"CONFIG.method__text\" class=\"method\"></span> <a data-bind=\"CONFIG.url__text__href:window.location.origin + value\" target=\"_blank\"></a></div>\n\t</footer>\n</body>",
		"httpresponse": "<script total>\n\n\texports.id = 'httpresponse';\n\texports.name = 'HTTP Response';\n\texports.icon = 'fa fa-reply';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif ($.refs.response)\n\t\t\t\t$.refs.response({ type: config.type || 'json', body: $.data instanceof Buffer ? $.data.toString('base64') : $.data, status: $.status, headers: $.headers });\n\t\t\telse\n\t\t\t\tinstance.throw('NO RESPONSE FN');\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component only works with HTTP Route which must have set `Response` to `Custom`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__required:1;dirsource:empty|Empty response,json|JSON,text|Text,html|HTML,xml|XML\">Response</div>\n\t</div>\n</settings>\n\n<style>\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
		"cgkli87a95": "<script total>\n\n\texports.name = 'Request';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'fas fa-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.lastIndexOf(';');\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; overflow-wrap: break-word; }\n\t.CLASS .status span { padding: 2px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"hidden\" data-bind=\"CONFIG.url__show\">\n\t\t<div class=\"status\" data-bind=\"CONFIG__template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"monospace\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t\t</script>\n\t\t</div>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.method__dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH,API|API;required:1\">Method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<div data---=\"input__?.url__required:1\"><b>URL address</b></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.timeout__type:number\">Timeout</div>\n\t\t\t\t<div class=\"help\"><i class=\"far fa-clock-o\"></i><span data-bind=\"?.timeout__text:((value||0)/1000).floor(2)+' sec.'\"></span><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.limit__type:number\">Max. size</div>\n\t\t\t\t<div class=\"help\"><i class=\"fas fa-calculator\"></i><span data-bind=\"?.limit__text:(value||0).filesize()\"></span><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div data---=\"input__?.send__required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.serialize__dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:Choose serialization;dirempty:None\" class=\"m\">Data serialization</div>\n\t\t<div data---=\"keyvalue__?.headers__placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</div>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<div data---=\"keyvalue__?.cookies__placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</div>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<div data---=\"input__?.parse__type:checkbox\">Parse Response to Object</div>\n\t\t<div data---=\"input__?.dnscache__type:checkbox\">Enable DNS cache</div>\n\t\t<div data---=\"input__?.insecure__type:checkbox\">Allow insecure connection</div>\n\t\t<div data---=\"input__?.xhr__type:checkbox\">Add XHR header</div>\n\t</div>\n</settings>",
		"ckrylc85c1": "<script total>\n\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '3';\n\texports.icon = 'fa fa-bullhorn';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\n\t\t<div class=\"mt10 m\">\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\n\t\t</div>\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n</body>",
		"cz0p7c8a57": "<script total>\n\n\texports.name = 'API Router';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-crosshairs';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { name: 'API Router', schema: [], color: '', icon: 'fa fa-crosshairs', path: '', rewrite: true, send: 'all' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path) {\n\t\t\t\tdata = U.get(data, config.path);\n\t\t\t} else if (!data.schema)\n\t\t\t\tdata = data.body;\n\n\t\t\tif (typeof(data.schema) === 'string') {\n\n\t\t\t\tvar schema = data.schema;\n\t\t\t\tvar index = schema.indexOf('/');\n\t\t\t\tvar key = index === -1 ? schema : schema.substring(0, index);\n\n\t\t\t\tvar queryindex = schema.indexOf('?');\n\t\t\t\tif (index === -1 && queryindex !== -1)\n\t\t\t\t\tkey = key.substring(0, queryindex);\n\n\t\t\t\tvar meta = compiled[key];\n\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tindex = queryindex;\n\n\t\t\t\t\tvar query = index === -1 ? {} : DEF.parsers.urlencoded(schema.substring(index + 1));\n\t\t\t\t\tvar arr = (index === -1 ? schema : schema.substring(0, index)).split('/').trim();\n\n\t\t\t\t\tarr.shift();\n\n\t\t\t\t\tif (arr.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = arr[i];\n\n\t\t\t\t\t\tdata.id = params[meta.params[0]];\n\t\t\t\t\t\tdata.params = params;\n\t\t\t\t\t\tdata.query = query;\n\n\t\t\t\t\t\t$.refs.params = params;\n\t\t\t\t\t\t$.refs.query = query;\n\n\t\t\t\t\t\tvar ctrl = $.refs.controller;\n\t\t\t\t\t\tif (ctrl) {\n\t\t\t\t\t\t\tctrl.params = data.params;\n\t\t\t\t\t\t\tctrl.id = data.id;\n\t\t\t\t\t\t\tctrl.query = data.query;\n\t\t\t\t\t\t\tdata.ip = ctrl.ip;\n\t\t\t\t\t\t\tdata.user = ctrl.user;\n\t\t\t\t\t\t\tdata.session = ctrl.session;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (config.send && config.send !== 'all')\n\t\t\t\t\t\t\t$.data = data[config.send];\n\t\t\t\t\t\telse if (config.path && !config.rewrite)\n\t\t\t\t\t\t\t$.data = data;\n\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component implements the [Total.js API Router](https://docs.totaljs.com/total4/cc674001rr51c/#total-js-routing) that allows you to provide only one endpoint (route) by adding multiple endpoints divided by keys. The component expects REST Route message or data in the form:\n\n```js\n{\n\t\"schema\": \"schema_name/{param_1}/{param_2}?query=arguments\",\n\t\"data\": {} // optional, request payload\n}\n```\n\n< __Good to know:__<br>Output data will be the same `data`, but extendend by adding new properties declared below.\n\n__Extended output data:__\n\n- `id {String}` first value from dynamic value\n- `params {Object}` dynamic values\n- `query {Object}` query arguments\n- `user {Object}` optional, inherited from the controller\n- `session {Object}` optional, inherited from the controller\n- `ip {String}` optional, inherited from the controller\n\nIf the controller is stored in the `message.refs.controller` property, then its properties like `controller.id`, `controller.params` and `controller.query` will be extendend by values from parsed schema.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header data-bind=\"CONFIG__template\">\n\t\t<script type=\"text/html\">\n\t\t\t<div{{ if value.color }} style=\"background:{{ value.color }}\"{{ fi }}>\n\t\t\t\t<i class=\"{{ value.icon }}\"></i><span>{{ value.name }}</span>\n\t\t\t</div>\n\t\t</script>\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<div data---=\"input__?.name__required:1\">Name</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.send__dirsource:all|Everything,params|Params,query|Query arguments,data|Payload\">Send next</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t\t<div data---=\"input__?.path\">Load data from the specific property/field</div>\n\t\t\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.color__type:color\">Color</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<div data---=\"input__?.icon__type:icon\">Icon</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div data-bind=\"?.path__show\" class=\"hidden\">\n\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t<div data---=\"input__?.rewrite__type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</div>\n\t\t\t</div>\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpapirouter.add\"><i class=\"fa fa-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"fa fa-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<div data-bind=\"?.schema__template:figure --> data-id__show:value && value.length\" class=\"fields m\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"fa fa-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"fa fa-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpapirouter.rem\" title=\"Remove\"><i class=\"far fa-trash-alt red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tmpapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
		"typerefinery_api_payload": "<script total>\n\n\texports.id = 'typerefinery_api_payload';\n\texports.name = 'API Payload';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, topic: \"topic\", type: \"wrap\", topicforce: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif (config.topicforce) {\n\t\t\t\tdata.topic = config.topic;\n\t\t\t}\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'wrap':\n\t\t\t\t\tinstance.send('output', { payload: JSON.stringify(data) });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar payloadData = JSON.parse(data.payload);\n\t\t\t\t\tvar payloadTopic = payloadData.topic || \"no topic\";\n\t\t\t\t\t//skip if topic is not the same\n\t\t\t\t\tif (config.topic === payloadTopic) {\n\t\t\t\t\t\tinstance.send('output', payloadData);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.topic === \"\") {\n\t\t\t\tconfig.topic = \"topic\";\n\t\t\t}\n\t\t\tif (config.type === \"\") {\n\t\t\t\tconfig.type = \"wrap\";\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tWrap input data into Payload schema.\n</readme>\n\n<style>\n\t.CLASS .output { text-align: right }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.topic__text\"><b>Topic</b></div>\n\t\t<div data---=\"input__?.type__dirsource:wrap|Wrap,unwrap|Unwrap;required:1\">Type</div>\n\t\t<div data---=\"input__?.topicforce__type:checkbox\">Overwrite data Topic?</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t\t<div>Topic: <b class=\"monospace\" data-bind=\"CONFIG.topic__text__empty\"></b></div>\n\t\t<div>Type: <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></div>\n\t</header>\n</body>",
		"cclau23c62": "<script total>\n\n\texports.name = 'Response';\n\texports.group = 'REST API';\n\texports.icon = 'fa fa-retweet';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { type: 'json', code: 200 };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\t\t\t\tctrl.status = config.code;\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tctrl.content($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain($.data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond on the REST Route component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.type__required:1;dirsource:json|JSON,success|Success,empty|Empty response,plain|Plain text,html|HTML\">Type</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<div data---=\"input__?.code__required:1;type:number\">Status code</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header span { font-family: var(--monospace); color: #FFF; margin-left: 4px; padding: 2px 3px; border-radius: var(--radius); }\n\t.CLASS header span:last-child { background-color: grey; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME<span data-bind=\"CONFIG.code__text__exec:el.css('background-color', value >= 400 ? '#E73323' : '#4285F4')\"></span> <span data-bind=\"CONFIG.type__text\"></span>\n\t</header>\n</body>",
		"typerefinery_senddata": "<script total>\r\n\r\n\texports.id = 'typerefinery_senddata';\r\n\texports.name = 'Send Data';\r\n\texports.icon = 'fa fa-bullhorn';\r\n\texports.group = '@TypeRefinery';\r\n\texports.author = 'Team_Typerefinery';\r\n\texports.version = '3';\r\n\r\n\texports.config = { title: exports.name, version: exports.version, random: true, type: 'object', data: '', restart: false };\r\n\texports.inputs = [{ id: 'input', name: 'Input' }];\r\n\texports.outputs = [{ id: 'output', name: 'Output' }];\r\n\r\n\texports.make = function(instance, config) {\r\n\r\n\t\tinstance.message = function($) {\r\n\t\t\t$.send('output', instance.getData());\r\n\t\t\t$.destroy();\r\n\t\t};\r\n\r\n\t\tinstance.getData = function() {\r\n\t\t\tvar val;\r\n\r\n\t\t\tswitch (config.type) {\r\n\t\t\t\tcase 'number':\r\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'buffer':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'date':\r\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'json':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : JSON.parse(config.data);\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'object':\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\r\n\t\t\t\t\t} catch (e) {\r\n\t\t\t\t\t\tinstance.throw(e);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'boolean':\r\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\treturn val;\r\n\t\t}; \r\n\r\n\t\tinstance.trigger = function() {\r\n\t\t\tinstance.send('output', instance.getData());\r\n\t\t};\r\n\r\n\t\tinstance.configure = function() {\r\n\t\t\tif (config.title === \"\") {\r\n\t\t\t\tconfig.title = exports.name;\r\n\t\t\t}\r\n\t\t\tconfig.version = exports.version;\r\n\t\t};\r\n\r\n\t\tinstance.configure();\r\n\r\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\r\n\t};\r\n\r\n</script>\r\n\r\n<style>\r\n\t.CLASS .padding { padding: 0 10px 10px; }\r\n\t.CLASS footer > div { margin: 10px; }\r\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\r\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\r\n\t.CLASS button:hover { background-color: #F8F8F8; }\r\n\t.CLASS button:active { background-color: #E0E0E0; }\r\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\r\n\t.CLASS .largetext { max-height: 100px; overflow-y: auto; }\r\n\r\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\r\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\r\n\t.ui-dark .CLASS button:active { background-color: #404040; }\r\n\r\n\t.CLASS .output { text-align: right }\r\n</style>\r\n\r\n<settings>\r\n\t<div class=\"padding\">\r\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\r\n\t\t<div data---=\"input__?.type__dirsource:string|String,number|Number,boolean|Boolean,date|Date,json|Json,object|Object,buffer|Buffer as Base64;required:1\">Type</div>\r\n\t\t<div class=\"mt10 m\">\r\n\t\t\t<div data---=\"input__?.restart__type:checkbox\">Trigger 5s after initialization.</div>\r\n\t\t\t<div data---=\"input__?.random__type:checkbox\">Random data</div>\r\n\t\t</div>\r\n\t\t<div data-bind=\"?.random__hide\" class=\"hidden\">\r\n\t\t\t<hr />\r\n\t\t\t<div data---=\"input__?.data__required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</div>\r\n\t\t</div>\r\n\t</div>\r\n</settings>\r\n\r\n<readme>\r\nThe component triggers data into the Flow. It can be used for testing purposes or for sending data to other components on input.\r\n</readme>\r\n\r\n<body>\r\n\t<header>\r\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\r\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i> - <b class=\"monospace\" data-bind=\"CONFIG.type__text__empty\"></b></small></div>\r\n\t</header>\r\n\t<div class=\"padding\">\r\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\r\n\t</div>\r\n\t<footer>\r\n\t\t<div class=\"monospace selectable largetext\" data---=\"objecttree__!CONFIG.data__text__empty\"></div>\r\n\t</footer>\r\n</body>",
		"typerefinery_code": "<script total>\n\n\texports.id = 'typerefinery_code';\n\texports.name = 'Code';\n\texports.icon = 'fa fa-code';\n\texports.group = '@TypeRefinery';\n\texports.author = 'TypeRefinery.io';\n\texports.version = '2';\n\n\texports.config = { title: exports.name, version: exports.version, outputs: 1, code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t\tif (config.title === \"\") {\n\t\t\t\tconfig.title = exports.name;\n\t\t\t}\n\t\t\tconfig.version = exports.version;\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n\tThis component executes a custom JavaScript code as it is.\n\n\tTo send data to the default output use `send(somedata);`\n\tTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n\t- first output--> `send(somedata)` or `$.send('output', somedata)`\n\t- second output --> `$.send('output2', somedata)`\n\t- ...\n\t- 5th output --> `$.send('output5', somedata)`\n\t- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div data---=\"input__?.title__text\"><b>Title</b></div>\n\t\t<div data---=\"input__?.outputs__type:number\" class=\"m\">Number of outputs</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div data---=\"codemirror__?.code__type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\" class=\"m\"></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b class=\"monospace\" data-bind=\"CONFIG.title__text__empty\"></b>\n\t\t<div><small><i>NAME v<span data-bind=\"CONFIG.version__text__empty\"></span></i></small></div>\n\t</header>\n</body>"
	},
	"design": {
		"ile47qxlc": {
			"id": "ile47qxlc",
			"config": {
				"title": "Print JSON",
				"version": "2",
				"repo": false,
				"data": true
			},
			"x": 246.98959350585938,
			"y": 46.979164123535156,
			"component": "typerefinery_printjson",
			"connections": {},
			"template": {
				"icon": "fa fa-print",
				"group": "@TypeRefinery",
				"name": "Print JSON",
				"inputs": [
					{
						"id": "input",
						"name": "Input"
					}
				]
			}
		},
		"httppost": {
			"id": "httppost",
			"config": {
				"url": "<http-route-url-nosfx>",
				"method": "POST",
				"timeout": 5000,
				"limit": 5120,
				"upload": false,
				"response": "json"
			},
			"x": 48,
			"y": 88.00000762939453,
			"component": "c71gcc7fd3",
			"connections": {
				"output": [
					{
						"id": "ile47qxlc",
						"index": "input"
					}
				]
			},
			"template": {
				"icon": "fa fa-route",
				"group": "Triggers",
				"name": "HTTP Route",
				"outputs": [
					{
						"id": "output",
						"name": "Output"
					}
				]
			}
		},
		"httpgetresponse": {
			"id": "httpgetresponse",
			"config": {
				"type": "json",
				"code": 200
			},
			"x": 602.9687805175781,
			"y": 650.9687881469727,
			"component": "cclau23c62",
			"connections": {},
			"template": {
				"icon": "fa fa-retweet",
				"group": "REST API",
				"name": "Response",
				"inputs": [
					{
						"id": "input",
						"name": "Response"
					}
				]
			}
		},
		"httpget": {
			"id": "httpget",
			"config": {
				"url": "<http-route-url-nosfx>",
				"method": "GET",
				"timeout": 5000,
				"limit": 5120,
				"upload": false,
				"response": "json"
			},
			"x": 46.9375,
			"y": 770.9271011352539,
			"component": "c71gcc7fd3",
			"connections": {
				"output": [
					{
						"id": "<senddata-id>",
						"index": "input"
					}
				]
			},
			"template": {
				"icon": "fa fa-route",
				"group": "Triggers",
				"name": "HTTP Route",
				"outputs": [
					{
						"id": "output",
						"name": "Output"
					}
				]
			}
		},
		"ile5l7th8": {
			"id": "ile5l7th8",
			"config": {
				"title": "Print JSON",
				"version": "2",
				"repo": false,
				"data": true
			},
			"x": 770.9687805175781,
			"y": 49.895835876464844,
			"component": "typerefinery_printjson",
			"connections": {},
			"template": {
				"icon": "fa fa-print",
				"group": "@TypeRefinery",
				"name": "Print JSON",
				"inputs": [
					{
						"id": "input",
						"name": "Input"
					}
				]
			}
		},
		"httpput": {
			"id": "httpput",
			"config": {
				"url": "<http-route-url-nosfx>",
				"method": "PUT",
				"timeout": 5000,
				"limit": 5120,
				"upload": false,
				"response": "json"
			},
			"x": 571.9583435058594,
			"y": 82.88541412353516,
			"component": "c71gcc7fd3",
			"connections": {
				"output": [
					{
						"id": "ile5l7th8",
						"index": "input"
					}
				]
			},
			"template": {
				"icon": "fa fa-route",
				"group": "Triggers",
				"name": "HTTP Route",
				"outputs": [
					{
						"id": "output",
						"name": "Output"
					}
				]
			}
		},
		"<senddata-id>": {
			"id": "<senddata-id>",
			"config": {
				"title": "Send Data",
				"version": "3",
				"random": false,
				"type": "json",
				"data": "<sample-data>",
				"restart": false
			},
			"x": 273,
			"y": 653.0000381469727,
			"component": "typerefinery_senddata",
			"connections": {
				"output": [
					{
						"id": "httpgetresponse",
						"index": "input"
					},
					{
						"id": "iles2kvkh",
						"index": "input"
					}
				]
			},
			"template": {
				"icon": "fa fa-bullhorn",
				"group": "@TypeRefinery",
				"name": "Send Data",
				"inputs": [
					{
						"id": "input",
						"name": "Input"
					}
				],
				"outputs": [
					{
						"id": "output",
						"name": "Output"
					}
				]
			}
		},
		"iles2kvkh": {
			"id": "iles2kvkh",
			"config": {
				"title": "Print JSON",
				"version": "2",
				"repo": false,
				"data": true
			},
			"x": 580.0000305175781,
			"y": 764.0000381469727,
			"component": "typerefinery_printjson",
			"connections": {},
			"template": {
				"icon": "fa fa-print",
				"group": "@TypeRefinery",
				"name": "Print JSON",
				"inputs": [
					{
						"id": "input",
						"name": "Input"
					}
				]
			}
		},
		"httpdelete": {
			"id": "httpdelete",
			"config": {
				"url": "<http-route-url-nosfx>",
				"method": "DELETE",
				"timeout": 5000,
				"limit": 5120,
				"upload": false,
				"response": "json"
			},
			"x": 1096.0000305175781,
			"y": 113.00000762939453,
			"component": "c71gcc7fd3",
			"connections": {
				"output": [
					{
						"id": "iles2zvuw",
						"index": "input"
					}
				]
			},
			"template": {
				"icon": "fa fa-route",
				"group": "Triggers",
				"name": "HTTP Route",
				"outputs": [
					{
						"id": "output",
						"name": "Output"
					}
				]
			}
		},
		"iles2zvuw": {
			"id": "iles2zvuw",
			"config": {
				"title": "Print JSON",
				"version": "2",
				"repo": false,
				"data": true
			},
			"x": 1339.0000305175781,
			"y": 32,
			"component": "typerefinery_printjson",
			"connections": {},
			"template": {
				"icon": "fa fa-print",
				"group": "@TypeRefinery",
				"name": "Print JSON",
				"inputs": [
					{
						"id": "input",
						"name": "Input"
					}
				]
			}
		},
		"groups": [
			{
				"id": "gleruqpps",
				"x": 19,
				"y": 14,
				"width": 498,
				"height": 583,
				"name": "Form Post/Create",
				"background": "rgba(236,134,50,0.3)"
			},
			{
				"id": "glerura9b",
				"x": 19,
				"y": 628.0000381469727,
				"width": 801,
				"height": 366,
				"name": "Form Get/Read",
				"background": "rgba(104,178,91,0.3)"
			},
			{
				"id": "glerutwb4",
				"x": 538.0000305175781,
				"y": 15,
				"width": 499,
				"height": 578,
				"name": "Form Update",
				"background": "rgba(115,39,245,0.3)"
			},
			{
				"id": "gles2yiaz",
				"x": 1060.0000305175781,
				"y": 14,
				"width": 561,
				"height": 578,
				"name": "Form Delete",
				"background": "rgba(231,51,35,0.3)"
			}
		],
		"paused": {}
	},
	"variables": {},
	"sources": {},
	"proxypath": "",
	"dtcreated": "2023-03-03T01:20:25.134Z"
}